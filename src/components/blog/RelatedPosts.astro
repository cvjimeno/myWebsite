---
// src/components/blog/RelatedPosts.astro (FINAL VERSION)
import { getCollection } from 'astro:content';
import PostCard from '../cards/PostCard.astro'; // <-- Use the new, unified component

export interface Props {
  currentPostSlug: string;
  // This is now just for finding related posts, not for display
  currentPostTags: string[]; 
  // We'll also need the category to boost relatedness
  currentPostCategory: string;
}
const { currentPostSlug, currentPostTags = [], currentPostCategory } = Astro.props;

const allPosts = await getCollection('blog', (entry) => {
  return entry.slug !== currentPostSlug && !entry.data.draft;
});

// A more robust sorting algorithm:
// - A post in the same CATEGORY gets a big point boost.
// - Each shared TAG gets a smaller point boost.
const relatedPosts = allPosts.map(post => {
  let score = 0;
  if (post.data.category === currentPostCategory) {
    score += 10; // Major boost for same category
  }
  const sharedTags = (post.data.tags || []).filter(tag => currentPostTags.includes(tag));
  score += sharedTags.length; // Minor boost for each shared tag
  
  return { post, score };
})
.filter(item => item.score > 0) // Only include posts with some relevance
.sort((a, b) => b.score - a.score) // Sort by the highest score
.slice(0, 3); // Get the top 3 most relevant posts

const shouldRender = relatedPosts.length > 0;
---
{shouldRender && (
  <section class="bg-bg-secondary dark:bg-bg-secondary border-y border-border-card py-16 md:py-20">
    <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
      <h2 class="text-2xl sm:text-3xl font-bold text-text-primary text-center mb-10">
        Para seguir explorando
      </h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8">
        {relatedPosts.map(item => (
          <PostCard post={item.post} />
        ))}
      </div>
    </div>
  </section>
)} 