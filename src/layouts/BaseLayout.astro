---
// src/layouts/BaseLayout.astro (FINAL, COMPLETE VERSION)
import '../styles/global.css';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { ViewTransitions } from 'astro:transitions';

export interface Props {
    title: string;
    description?: string;
    image?: string;
    pubDate?: Date;
    type?: 'website' | 'article';
}

// --- Brand & SEO Configuration ---
const publicationName = "El Prompt"; 
const personalName = "Carlos Velasco";
const personalBrandTagline = "Científico y Divulgador de IA";

const defaultDescription = `Soy ${personalName}, un ${personalBrandTagline.toLowerCase()}. Explora mis artículos sobre Inteligencia Artificial, ciencia y tecnología en mi publicación, ${publicationName}.`;

const { 
  title, 
  description = defaultDescription,
  image = '/og-default.png', // Default OG image for sharing
  pubDate,
  type = 'website'
} = Astro.props;


// --- Final, Robust Title and URL Logic ---
const permalink = Astro.url.href;
const pathname = Astro.url.pathname;
let fullTitle;

if (pathname === '/blog' || pathname === '/blog/') {
  // It's the main blog index page
  fullTitle = `${publicationName} | ${personalBrandTagline}`; // e.g., "El Detonante | Científico y Divulgador de IA"
} else if (pathname.startsWith('/blog/')) {
  // It's an individual blog post
  fullTitle = `${title} | ${publicationName}`; // e.g., "Post Title | El Detonante"
} else if (title === 'Inicio') {
  // It's the homepage
  fullTitle = `${personalName} | ${personalBrandTagline}`; // e.g., "Carlos Velasco | Científico y Divulgador de IA"
} else {
  // For all other static pages (Sobre mí, Trayectoria, Contacto)
  fullTitle = `${title} | ${personalName}`; // e.g., "Quién Soy | Carlos Velasco"
}

const canonicalImage = new URL(image, Astro.url);
---
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon-light.svg" type="image/svg+xml" media="(prefers-color-scheme: light)" sizes="64x64"/>
    <link rel="icon" href="/favicon-dark.svg" type="image/svg+xml" media="(prefers-color-scheme: dark)" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Standard SEO -->
    <title>{fullTitle}</title>
    <meta name="title" content={fullTitle} />
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={permalink} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={canonicalImage.href} />
    <meta property="og:site_name" content={personalName} /> 

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={permalink} />
    <meta property="twitter:title" content={fullTitle} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={canonicalImage.href} />

    <!-- Article-specific tags -->
    {type === 'article' && pubDate && (
      <meta property="article:published_time" content={pubDate.toISOString()} />
    )}

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">

    <ViewTransitions />

    <!-- This inline script runs before all else to prevent theme flashing -->
    <script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('color-theme')) {
          return localStorage.getItem('color-theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    </script>
</head>
<body>
    <Header />
    <main>
        <slot />
    </main>
    <Footer />

    <!-- This single, robust script handles all global interactivity -->
    <script is:inline>
      const handleThemeToggle = () => {
        const isDarkMode = document.documentElement.classList.toggle('dark');
        localStorage.setItem('color-theme', isDarkMode ? 'dark' : 'light');
      };

      const openMobileMenu = () => {
        const mobileToggleBtn = document.getElementById('mobile-menu-toggle');
        const menuDropdown = document.getElementById('mobile-menu-dropdown');
        const openIcon = document.getElementById('menu-icon-open');
        const closeIcon = document.getElementById('menu-icon-close');
        
        if (!mobileToggleBtn || !menuDropdown || !openIcon || !closeIcon) return;
        
        mobileToggleBtn.setAttribute('aria-expanded', 'true');
        menuDropdown.classList.remove('opacity-0', '-translate-y-4', 'pointer-events-none');
        document.body.classList.add('overflow-hidden');
        openIcon.classList.add('hidden');
        closeIcon.classList.remove('hidden');
      };

      const closeMobileMenu = () => {
        const mobileToggleBtn = document.getElementById('mobile-menu-toggle');
        const menuDropdown = document.getElementById('mobile-menu-dropdown');
        const openIcon = document.getElementById('menu-icon-open');
        const closeIcon = document.getElementById('menu-icon-close');

        if (!mobileToggleBtn || !menuDropdown || !openIcon || !closeIcon) return;

        mobileToggleBtn.setAttribute('aria-expanded', 'false');
        menuDropdown.classList.add('opacity-0', '-translate-y-4', 'pointer-events-none');
        document.body.classList.remove('overflow-hidden');
        openIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
      };

      const handleMobileMenuToggle = () => {
        const mobileToggleBtn = document.getElementById('mobile-menu-toggle');
        if (!mobileToggleBtn) return;
        const isExpanded = mobileToggleBtn.getAttribute('aria-expanded') === 'true';
        isExpanded ? closeMobileMenu() : openMobileMenu();
      };

      const handleDocumentClick = (event) => {
        const mobileToggleBtn = document.getElementById('mobile-menu-toggle');
        const menuDropdown = document.getElementById('mobile-menu-dropdown');
        if (!mobileToggleBtn || !menuDropdown) return;
        
        const isExpanded = mobileToggleBtn.getAttribute('aria-expanded') === 'true';
        const isClickInsideMenu = menuDropdown.contains(event.target);
        const isClickOnToggle = mobileToggleBtn.contains(event.target);

        if (isExpanded && !isClickInsideMenu && !isClickOnToggle) {
          closeMobileMenu();
        }
      };

      const handleSubmenuToggle = () => {
        const submenuToggleBtn = document.getElementById('mobile-submenu-toggle');
        const submenu = document.getElementById('mobile-submenu');
        const submenuChevron = document.getElementById('mobile-submenu-chevron');
        if (!submenuToggleBtn || !submenu || !submenuChevron) return;

        const isExpanded = submenuToggleBtn.getAttribute('aria-expanded') === 'true';
        if (isExpanded) {
          submenuToggleBtn.setAttribute('aria-expanded', 'false');
          submenuChevron.style.transform = 'rotate(0deg)';
          submenu.style.maxHeight = '0px';
        } else {
          submenuToggleBtn.setAttribute('aria-expanded', 'true');
          submenuChevron.style.transform = 'rotate(90deg)';
          submenu.style.maxHeight = `${submenu.scrollHeight}px`;
        }
      };

      const setupDesktopDropdown = () => {
          const dropdownToggle = document.getElementById('sobre-mi-dropdown-toggle');
          const dropdownMenu = document.getElementById('sobre-mi-dropdown-menu');
          const dropdownChevron = document.getElementById('dropdown-chevron');
          const dropdownParent = document.getElementById('sobre-mi-dropdown-parent');
          if (!dropdownToggle || !dropdownMenu || !dropdownChevron || !dropdownParent) return;
          
          let isDropdownOpen = false;
          const openDropdown = () => {
              if (isDropdownOpen) return;
              dropdownMenu.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
              dropdownToggle.setAttribute('aria-expanded', 'true');
              dropdownChevron.style.transform = 'rotate(180deg)';
              isDropdownOpen = true;
          };
          const closeDropdown = () => {
              if (!isDropdownOpen) return;
              dropdownMenu.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
              dropdownToggle.setAttribute('aria-expanded', 'false');
              dropdownChevron.style.transform = 'rotate(0deg)';
              isDropdownOpen = false;
          };
          
          dropdownToggle.addEventListener('click', (e) => { e.stopPropagation(); isDropdownOpen ? closeDropdown() : openDropdown(); });
          document.addEventListener('click', () => { if (isDropdownOpen) closeDropdown(); });
          document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && isDropdownOpen) closeDropdown(); });
      }

      function setupInteractivity() {
        document.getElementById('theme-toggle')?.addEventListener('click', handleThemeToggle);
        document.getElementById('mobile-menu-toggle')?.addEventListener('click', handleMobileMenuToggle);
        document.addEventListener('click', handleDocumentClick);
        document.getElementById('mobile-submenu-toggle')?.addEventListener('click', handleSubmenuToggle);
        setupDesktopDropdown();
      }
      
      setupInteractivity();
      document.addEventListener('astro:after-swap', setupInteractivity);
    </script>
</body>
</html>