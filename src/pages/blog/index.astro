---
// src/pages/blog/index.astro (FINAL POLISHED VERSION)
import BaseLayout from "../../layouts/BaseLayout.astro";
import PostCard from "../../components/cards/PostCard.astro";
import { getCollection } from "astro:content";

const publicationName = "El Prompt";
const pageTitle = `>>> ${publicationName}`;
const pageDescription = `El archivo completo de ${publicationName}. Artículos sobre Inteligencia Artificial, ciencia y productividad para darte la señal, no el ruido. Una publicación de Carlos Velasco.`;

const allPosts = await getCollection("blog", ({ data }) => !data.draft);
const usedCategories = [
  ...new Set(allPosts.map((post) => post.data.category)),
].sort();
const allFilterOptions = ["Todos", ...usedCategories];
const postsWithData = allPosts.map((post) => ({
  ...post,
  dataset: { category: post.data.category.toLowerCase() },
}));
const sortedPosts = postsWithData.sort(
  (a, b) =>
    new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf()
);
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-16 md:py-20">
    <header class="text-center max-w-3xl mx-auto mb-12 md:mb-16">
      <h1
        id="blog-title-container"
        class="flex items-baseline justify-center gap-x-2 md:gap-x-4 text-5xl md:text-7xl font-bold text-text-primary mb-6"
        data-text-to-type={publicationName}
      >
        <span class="prompt-prefix text-accent-primary">>>></span>
        <span id="prompt-container" class="prompt-text relative">
          <span id="typewriter-text"></span>
        </span>
      </h1>
      <p class="text-lg text-text-secondary leading-relaxed">
        Mi Blog donde cada semana iré compartiendo lo que descubro experimentando con la IA: novedades, herramientas y modelos que funcionan, prompts útiles, y todo
        lo que vaya aprendiendo por el camino. Sin hype, solo mi experiencia, de la mano de la tecnología. ¿Te quedas a descubrir conmigo?

      </p>
    </header>

    <div
      id="filter-buttons"
      class="flex flex-wrap justify-center gap-2 sm:gap-3 mb-16"
    >
      {
        allFilterOptions.map((category, index) => (
          <button
            class:list={[
              "filter-btn px-4 py-2 font-medium rounded-lg transition-colors duration-200",
              index === 0
                ? "bg-accent-primary text-button-text"
                : "bg-bg-secondary text-text-secondary hover:bg-gray-200 dark:bg-bg-secondary dark:text-text-primary dark:hover:bg-gray-700",
            ]}
            data-category={category.toLowerCase()}
          >
            {category}
          </button>
        ))
      }
    </div>
    <main
      id="blog-grid"
      class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 md:gap-10"
    >
      {
        sortedPosts.map((post) => (
          <div data-category={post.dataset.category}>
            <PostCard post={post} />
          </div>
        ))
      }
    </main>
  </div>
</BaseLayout>

<style>
  @keyframes modern-blink {
    0% {
      transform: scaleY(0);
    }
    5% {
      transform: scaleY(1);
    }
    50% {
      transform: scaleY(1);
    }
    55% {
      transform: scaleY(0);
    }
    100% {
      transform: scaleY(0);
    }
  }
  .prompt-prefix {
    font-weight: 600;
    opacity: 0.8;
  }
  .prompt-text {
    min-height: 5rem;
    display: inline-block;
  }
  @media (max-width: 768px) {
    .prompt-text {
      min-height: 3.5rem;
    }
  }
  .prompt-text::after {
    content: "";
    position: absolute;
    right: -1rem;
    top: 15%;
    height: 70%;
    width: 0.5rem;
    background-color: var(--color-accent-highlight);
    transform-origin: center;
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
  }
  .prompt-text.blinking::after {
    opacity: 1;
    /* THE FIX: Changed blink duration to 1.2s */
    animation: modern-blink 1.2s infinite;
  }
  @media (max-width: 768px) {
    .prompt-text::after {
      right: -0.75rem;
      width: 0.4rem;
    }
  }
</style>

<script>
  let typewriterTimers = [];

  function cleanupTypewriter() {
    typewriterTimers.forEach(clearTimeout);
    typewriterTimers = [];
  }

  function setupTypewriter() {
    cleanupTypewriter();

    const titleContainer = document.getElementById("blog-title-container");
    const promptContainer = titleContainer?.querySelector("#prompt-container");
    const textTarget = titleContainer?.querySelector("#typewriter-text");
    const textToType = titleContainer?.dataset.textToType;

    if (!promptContainer || !textTarget || !textToType) return;

    const typingDelay = 120;
    let charIndex = 0;

    const typeChar = () => {
      if (charIndex < textToType.length) {
        textTarget.textContent += textToType.charAt(charIndex);
        charIndex++;
        const timerId = setTimeout(typeChar, typingDelay);
        typewriterTimers.push(timerId);
      } else {
        // THE FIX: Changed timeout to 6000ms (5 blinks at 1.2s each)
        const timerId = setTimeout(() => {
          promptContainer.classList.remove("blinking");
        }, 6000);
        typewriterTimers.push(timerId);
      }
    };

    textTarget.textContent = "";
    promptContainer.classList.add("blinking");
    typeChar();
  }

  function setupBlogFilters() {
    const filterButtons = document.querySelectorAll(".filter-btn");
    if (!filterButtons.length) return;
    const blogCardWrappers = document.querySelectorAll("#blog-grid > div");

    const activeClasses = ["bg-accent-primary", "text-button-text"];
    const inactiveClasses = [
      "bg-bg-secondary",
      "text-text-secondary",
      "hover:bg-gray-200",
      "dark:bg-bg-secondary",
      "dark:text-text-primary",
      "dark:hover:bg-gray-700",
    ];

    filterButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const selectedCategory = (button as HTMLElement).dataset.category;
        filterButtons.forEach(
          (btn) =>
            (btn.className =
              button === btn
                ? `filter-btn px-4 py-2 font-medium rounded-lg transition-colors duration-200 ${activeClasses.join(" ")}`
                : `filter-btn px-4 py-2 font-medium rounded-lg transition-colors duration-200 ${inactiveClasses.join(" ")}`)
        );

        blogCardWrappers.forEach((wrapper) => {
          const wrapperElement = wrapper as HTMLElement;
          const postCategory = wrapperElement.dataset.category;
          wrapperElement.style.display =
            selectedCategory === "todos" || postCategory === selectedCategory
              ? "block"
              : "none";
        });
      });
    });
  }

  function runPageScripts() {
    setupTypewriter();
    setupBlogFilters();
  }

  document.addEventListener("astro:before-swap", cleanupTypewriter);
  document.addEventListener("astro:page-load", runPageScripts);
</script>
