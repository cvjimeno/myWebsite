---
// src/pages/blog/index.astro
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogCard from '../../components/cards/BlogCardHomepage.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

import carlosProfilePic from '../../assets/images/hero-main-picture.webp';

const pageTitle = "El Blog de CV";
const pageDescription = "Explora todos mis artículos sobre IA, ciencia y tecnología. Un espacio para aprender sobre los últimos avances y reflexionar sobre su impacto en nuestro mundo.";

const allHeroImages = import.meta.glob('/src/assets/images/blog/hero/*.{jpeg,jpg,png,gif,webp}');
const allPosts = await getCollection('blog', ({ data }) => !data.draft);

// THE CRITICAL FIX: The complete and correct data mapping logic is now here.
const postsWithImages = await Promise.all(
  allPosts.map(async (post) => {
    const imagePath = post.data.heroImage;
    if (!allHeroImages[imagePath]) {
      throw new Error(`[blog/index.astro] Hero image for post "${post.slug}" not found. Path: "${imagePath}"`);
    }
    const resolvedImage = (await allHeroImages[imagePath]()).default;
    return { 
      ...post, 
      data: { ...post.data, heroImageResolved: resolvedImage } 
    };
  })
);

const sortedPosts = postsWithImages.sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf());

const allCategories = ['Todos', ...new Set(sortedPosts.flatMap(post => post.data.tags || []))].sort((a, b) => a === 'Todos' ? -1 : b === 'Todos' ? 1 : a.localeCompare(b));
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-16 md:py-20">
    
    <header class="text-center max-w-3xl mx-auto mb-12 md:mb-16">
      <Image 
          src={carlosProfilePic} 
          alt="Foto de Carlos Velasco"
          width={120} height={120} format="webp"
          class="w-24 h-24 md:w-28 md:h-28 rounded-full mx-auto mb-6 shadow-md" 
      />
      <h1 class="text-5xl md:text-6xl font-bold text-text-primary mb-4">
        {pageTitle}
      </h1>
      <p class="text-lg text-text-secondary leading-relaxed">
        {pageDescription}
      </p>
    </header>

    <div id="filter-buttons" class="flex flex-wrap justify-center gap-2 sm:gap-3 mb-16">
      {allCategories.map((category, index) => {
        const baseClasses = "filter-btn px-4 py-2 font-medium rounded-lg transition-colors duration-200";
        const inactiveClasses = "bg-bg-secondary text-text-secondary hover:bg-gray-200 dark:bg-bg-secondary dark:text-text-primary dark:hover:bg-gray-700";
        const activeClasses = "bg-accent-primary text-white";
        const isInitiallyActive = index === 0;

        return (
          <button 
            class:list={[ baseClasses, isInitiallyActive ? activeClasses : inactiveClasses ]}
            data-category={category.toLowerCase()}
          >
            {category}
          </button>
        )
      })}
    </div>

    <main id="blog-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 md:gap-10">
      {sortedPosts.map((post) => (
        <BlogCard
          href={`/blog/${post.slug}/`}
          title={post.data.title}
          image={post.data.heroImageResolved}
          imageAlt={post.data.imageAlt}
          excerpt={post.data.description}
          date={new Date(post.data.pubDate).toLocaleDateString('es-ES', { month: 'long', day: 'numeric', year: 'numeric' })}
          readingTime={`${post.data.readingTime} min`}
          tags={post.data.tags}
        />
      ))}
    </main>
  </div>
</BaseLayout>

<script>
  function setupBlogFilters() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const blogCards = document.querySelectorAll('#blog-grid > article');
    
    const activeClasses = ['bg-accent-primary', 'text-white'];
    const inactiveClasses = ['bg-bg-secondary', 'text-text-secondary', 'hover:bg-gray-200', 'dark:bg-bg-secondary', 'dark:text-text-primary', 'dark:hover:bg-gray-700'];

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const selectedCategory = button.dataset.category;

        filterButtons.forEach(btn => {
          btn.classList.remove(...activeClasses);
          btn.classList.add(...inactiveClasses);
        });
        
        button.classList.remove(...inactiveClasses);
        button.classList.add(...activeClasses);

        blogCards.forEach(card => {
          const cardTags = card.dataset.tags || '';
          if (selectedCategory === 'todos' || cardTags.includes(selectedCategory)) {
            card.style.display = 'flex';
          } else {
            card.style.display = 'none';
          }
        });
      });
    });
  }

  document.addEventListener('DOMContentLoaded', setupBlogFilters);
  document.addEventListener('astro:after-swap', setupBlogFilters);
</script>

<style is:global>
  #blog-grid > article {
    transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
  }
</style>