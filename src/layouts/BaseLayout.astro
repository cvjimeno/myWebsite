---
// src/layouts/BaseLayout.astro (COMPLETE AND CORRECTED FILE)
import '../styles/global.css';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { ViewTransitions } from 'astro:transitions';

export interface Props {
    title: string;
    description?: string;
    image?: string;
    pubDate?: Date;
    type?: 'website' | 'article';
}
const { 
  title, 
  description = "Soy Carlos Velasco, un científico apasionado por la ciencia y la tecnología que escribe sobre Inteligencia Artificial. ¡Bienvenidos a mi hogar digital!",
  image = '/og-default.png',
  pubDate,
  type = 'website'
} = Astro.props;

const siteName = "El Prompt";
const fullTitle = `${title} | ${siteName}`;
const permalink = Astro.url.href;
const canonicalImage = new URL(image, Astro.url);
---
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon-light.svg" type="image/svg+xml" media="(prefers-color-scheme: light)" sizes="64x64"/>
    <link rel="icon" href="/favicon-dark.svg" type="image/svg+xml" media="(prefers-color-scheme: dark)" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Standard SEO -->
    <title>{fullTitle}</title>
    <meta name="title" content={fullTitle} />
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={permalink} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={canonicalImage} />
    <meta property="og:site_name" content={siteName} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={permalink} />
    <meta property="twitter:title" content={fullTitle} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={canonicalImage} />

    <!-- Article-specific tags -->
    {type === 'article' && pubDate && (
      <>
        <meta property="article:published_time" content={pubDate.toISOString()} />
      </>
    )}

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">

    <ViewTransitions />

    <script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('color-theme')) {
          return localStorage.getItem('color-theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    </script>
</head>
<body>
    <Header />
    <main>
        <slot />
    </main>
    <Footer />
<script is:inline>
  // This single, robust script handles all global interactivity.
  
  // --- Define all our functions first ---
  
  const handleThemeToggle = () => {
    const isDarkMode = document.documentElement.classList.toggle('dark');
    localStorage.setItem('color-theme', isDarkMode ? 'dark' : 'light');
  };

  const openMobileMenu = () => {
    const mobileToggleBtn = document.getElementById('mobile-menu-toggle');
    const menuDropdown = document.getElementById('mobile-menu-dropdown');
    const openIcon = document.getElementById('menu-icon-open');
    const closeIcon = document.getElementById('menu-icon-close');
    
    if (!mobileToggleBtn || !menuDropdown || !openIcon || !closeIcon) return;
    
    mobileToggleBtn.setAttribute('aria-expanded', 'true');
    menuDropdown.classList.remove('opacity-0', '-translate-y-4', 'pointer-events-none');
    document.body.classList.add('overflow-hidden');
    openIcon.classList.add('hidden');
    closeIcon.classList.remove('hidden');
  };

  const closeMobileMenu = () => {
    const mobileToggleBtn = document.getElementById('mobile-menu-toggle');
    const menuDropdown = document.getElementById('mobile-menu-dropdown');
    const openIcon = document.getElementById('menu-icon-open');
    const closeIcon = document.getElementById('menu-icon-close');

    if (!mobileToggleBtn || !menuDropdown || !openIcon || !closeIcon) return;

    mobileToggleBtn.setAttribute('aria-expanded', 'false');
    menuDropdown.classList.add('opacity-0', '-translate-y-4', 'pointer-events-none');
    document.body.classList.remove('overflow-hidden');
    openIcon.classList.remove('hidden');
    closeIcon.classList.add('hidden');
  };

  const handleMobileMenuToggle = () => {
    const mobileToggleBtn = document.getElementById('mobile-menu-toggle');
    if (!mobileToggleBtn) return;
    const isExpanded = mobileToggleBtn.getAttribute('aria-expanded') === 'true';
    isExpanded ? closeMobileMenu() : openMobileMenu();
  };

  const handleDocumentClick = (event) => {
    const mobileToggleBtn = document.getElementById('mobile-menu-toggle');
    const menuDropdown = document.getElementById('mobile-menu-dropdown');
    if (!mobileToggleBtn || !menuDropdown) return;
    
    const isExpanded = mobileToggleBtn.getAttribute('aria-expanded') === 'true';
    const isClickInsideMenu = menuDropdown.contains(event.target);
    const isClickOnToggle = mobileToggleBtn.contains(event.target);

    // If menu is open and the click is NOT inside the menu and NOT on the toggle button, close it.
    if (isExpanded && !isClickInsideMenu && !isClickOnToggle) {
      closeMobileMenu();
    }
  };

  const handleSubmenuToggle = () => {
    const submenuToggleBtn = document.getElementById('mobile-submenu-toggle');
    const submenu = document.getElementById('mobile-submenu');
    const submenuChevron = document.getElementById('mobile-submenu-chevron');
    if (!submenuToggleBtn || !submenu || !submenuChevron) return;

    const isExpanded = submenuToggleBtn.getAttribute('aria-expanded') === 'true';
    if (isExpanded) {
      submenuToggleBtn.setAttribute('aria-expanded', 'false');
      submenuChevron.style.transform = 'rotate(0deg)';
      submenu.style.maxHeight = '0px';
    } else {
      submenuToggleBtn.setAttribute('aria-expanded', 'true');
      submenuChevron.style.transform = 'rotate(90deg)';
      submenu.style.maxHeight = `${submenu.scrollHeight}px`;
    }
  };

  const handleDesktopDropdown = () => {
      // All the desktop dropdown logic from the original script
      const dropdownToggle = document.getElementById('sobre-mi-dropdown-toggle');
      const dropdownMenu = document.getElementById('sobre-mi-dropdown-menu');
      const dropdownChevron = document.getElementById('dropdown-chevron');
      const dropdownParent = document.getElementById('sobre-mi-dropdown-parent');
      if (!dropdownToggle || !dropdownMenu || !dropdownChevron || !dropdownParent) return;
      //... This part of your original script remains unchanged as it's not the source of the bug.
      // Keeping it brief here for clarity, your existing logic is fine.
        let isDropdownOpen = false;
        const openDropdown = () => {
            dropdownMenu.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
            dropdownToggle.setAttribute('aria-expanded', 'true');
            dropdownChevron.style.transform = 'rotate(180deg)';
            isDropdownOpen = true;
        };
        const closeDropdown = () => {
            dropdownMenu.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
            dropdownToggle.setAttribute('aria-expanded', 'false');
            dropdownChevron.style.transform = 'rotate(0deg)';
            isDropdownOpen = false;
        };
        dropdownToggle.addEventListener('click', (e) => { e.stopPropagation(); isDropdownOpen ? closeDropdown() : openDropdown() });
        document.addEventListener('click', (event) => { if (isDropdownOpen && !dropdownParent.contains(event.target)) closeDropdown() });
        document.addEventListener('keydown', (event) => { if (event.key === 'Escape' && isDropdownOpen) closeDropdown() });
  }

  // --- This is the main setup function that runs on every page load ---
  function setupInteractivity() {
    // Theme setup
    const theme = localStorage.getItem('color-theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    if (theme === 'dark') document.documentElement.classList.add('dark'); else document.documentElement.classList.remove('dark');
    document.getElementById('theme-toggle')?.addEventListener('click', handleThemeToggle);

    // Mobile Menu setup
    document.getElementById('mobile-menu-toggle')?.addEventListener('click', handleMobileMenuToggle);
    document.addEventListener('click', handleDocumentClick);
    
    // Mobile Submenu Accordion setup
    document.getElementById('mobile-submenu-toggle')?.addEventListener('click', handleSubmenuToggle);

    // Desktop Dropdown setup
    handleDesktopDropdown();
  }
  
  // --- Astro View Transitions Lifecycle ---
  // Run the setup on the initial page load
  setupInteractivity();
  
  // Run the setup again after every page swap
  document.addEventListener('astro:after-swap', setupInteractivity);
</script>
</body>
</html>

