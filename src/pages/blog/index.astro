---
// src/pages/blog/index.astro (FINAL, DYNAMIC & ROBUST VERSION)
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostCard from '../../components/cards/PostCard.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import carlosProfilePic from '../../assets/images/hero-main-picture.webp';

const publicationName = "El Prompt";
const pageTitle = `${publicationName}`;
const pageDescription = `El archivo completo de ${publicationName}. Artículos sobre Inteligencia Artificial, ciencia y productividad para darte la señal, no el ruido. Una publicación de Carlos Velasco.`;

const allPosts = await getCollection('blog', ({ data }) => !data.draft);

// THE FIX #1: Dynamically generate the list of filter buttons.
// 1. Get all categories from all posts.
// 2. Use `new Set()` to get only the unique values.
// 3. Convert back to an array and sort it alphabetically.
const usedCategories = [...new Set(allPosts.map(post => post.data.category))].sort();
// 4. Prepend "Todos" to the beginning of the list.
const allFilterOptions = ['Todos', ...usedCategories];

// Data fetching for cards remains the same.
const allHeroImages = import.meta.glob('/src/assets/images/blog/hero/*.{jpeg,jpg,png,gif,webp}');
const postsWithImages = await Promise.all(
  allPosts.map(async (post) => {
    const imagePath = post.data.heroImage;
    if (!allHeroImages[imagePath]) {
      throw new Error(`[blog/index.astro] Hero image for post "${post.slug}" not found. Path: "${imagePath}"`);
    }
    const resolvedImage = (await allHeroImages[imagePath]()).default;
    return { 
      ...post, 
      data: { ...post.data, heroImageResolved: resolvedImage } 
    };
  })
);
const sortedPosts = postsWithImages.sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf());
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-16 md:py-20">
    
    <header class="text-center max-w-3xl mx-auto mb-12 md:mb-16">
      <a href="/quien-soy/" class="inline-block mb-6 group">
        <Image 
            src={carlosProfilePic} 
            alt="Foto de Carlos Velasco"
            width={120} height={120} format="webp"
            class="w-24 h-24 md:w-28 md:h-28 rounded-full shadow-lg border-2 border-transparent group-hover:border-accent-primary transition-all duration-200" 
        />
      </a>
      <h1 class="text-5xl md:text-6xl font-bold text-text-primary mb-4">
        {publicationName}
      </h1>
      <p class="text-lg text-text-secondary leading-relaxed">
        El lugar donde la curiosidad se encuentra con el código. Cada semana, desmonto temas complejos sobre Inteligencia Artificial y productividad para darte la señal, no el ruido.
      </p>
    </header>

  <div id="filter-buttons" class="flex flex-wrap justify-center gap-2 sm:gap-3 mb-16">
    {allFilterOptions.map((category, index) => {
      const baseClasses = "filter-btn px-4 py-2 font-medium rounded-lg transition-colors duration-200";
      const inactiveClasses = "bg-bg-secondary text-text-secondary hover:bg-gray-200 dark:bg-bg-secondary dark:text-text-primary dark:hover:bg-gray-700";
      const activeClasses = "bg-accent-primary text-button-text";

      return (
        <button 
          class:list={[ baseClasses, index === 0 ? activeClasses : inactiveClasses ]}
          data-category={category.toLowerCase()}
        >
          {category}
        </button>
      )
    })}
  </div>

    <main id="blog-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 md:gap-10">
      {sortedPosts.map((post) => (
        <PostCard post={post} />
      ))}
    </main>
  </div>
</BaseLayout>

<script>
  // THE FIX #2: The simple, robust script that works with the dynamic buttons.
  function setupBlogFilters() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const blogCards = document.querySelectorAll('#blog-grid > article');
    if (filterButtons.length === 0) return;

    const activeClasses = ['bg-accent-primary', 'text-button-text'];
    const inactiveClasses = ['bg-bg-secondary', 'text-text-secondary', 'hover:bg-gray-200', 'dark:bg-bg-secondary', 'dark:text-text-primary', 'dark:hover:bg-gray-700'];

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const selectedCategory = button.dataset.category;

        // Update button styles
        filterButtons.forEach(btn => {
          btn.classList.remove(...activeClasses);
          btn.classList.add(...inactiveClasses);
        });
        button.classList.add(...activeClasses);
        button.classList.remove(...inactiveClasses);

        // Filter cards using the reliable `data-category` attribute
        blogCards.forEach(card => {
          const cardElement = card as HTMLElement;
          const postCategory = cardElement.dataset.category;
          
          if (selectedCategory === 'todos' || postCategory === selectedCategory) {
            cardElement.classList.remove('hidden');
          } else {
            cardElement.classList.add('hidden');
          }
        });
      });
    });
  }
  
  // This ensures the script re-runs after every page navigation
  document.addEventListener('astro:page-load', setupBlogFilters);
</script>