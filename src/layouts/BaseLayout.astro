---
// src/layouts/BaseLayout.astro (COMPLETE AND CORRECTED FILE)
import '../styles/global.css';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { ViewTransitions } from 'astro:transitions';

export interface Props {
    title: string;
    description?: string;
    image?: string;
    pubDate?: Date;
    type?: 'website' | 'article';
}
const { 
  title, 
  description = "Soy Carlos Velasco, un científico apasionado por la ciencia y la tecnología que escribe sobre Inteligencia Artificial. ¡Bienvenidos a mi hogar digital!",
  image = '/og-default.png',
  pubDate,
  type = 'website'
} = Astro.props;

const siteName = "El Blog de CV";
const fullTitle = `${title} | ${siteName}`;
const permalink = Astro.url.href;
const canonicalImage = new URL(image, Astro.url);
---
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon-light.svg" type="image/svg+xml" media="(prefers-color-scheme: light)" sizes="64x64"/>
    <link rel="icon" href="/favicon-dark.svg" type="image/svg+xml" media="(prefers-color-scheme: dark)" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Standard SEO -->
    <title>{fullTitle}</title>
    <meta name="title" content={fullTitle} />
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={permalink} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={canonicalImage} />
    <meta property="og:site_name" content={siteName} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={permalink} />
    <meta property="twitter:title" content={fullTitle} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={canonicalImage} />

    <!-- Article-specific tags -->
    {type === 'article' && pubDate && (
      <>
        <meta property="article:published_time" content={pubDate.toISOString()} />
      </>
    )}

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">

    <ViewTransitions />

    <script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('color-theme')) {
          return localStorage.getItem('color-theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    </script>
</head>
<body>
    <Header />
    <main>
        <slot />
    </main>
    <Footer />

    <script is:inline>
      function pageSetup() {
        const applyTheme = () => {
          const theme = (() => {
            if (typeof localStorage !== 'undefined' && localStorage.getItem('color-theme')) {
              return localStorage.getItem('color-theme');
            }
            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
              return 'dark';
            }
            return 'light';
          })();
          if (theme === 'dark') {
            document.documentElement.classList.add('dark');
          } else {
            document.documentElement.classList.remove('dark');
          }
        };
        const themeToggleBtn = document.getElementById('theme-toggle');
        const handleToggleClick = () => {
          const isDarkMode = document.documentElement.classList.toggle('dark');
          localStorage.setItem('color-theme', isDarkMode ? 'dark' : 'light');
        };
        if (themeToggleBtn) {
          themeToggleBtn.addEventListener('click', handleToggleClick);
        }
        const mobileToggleBtn = document.getElementById('mobile-menu-toggle');
        const menuDropdown = document.getElementById('mobile-menu-dropdown');
        const openIcon = document.getElementById('menu-icon-open');
        const closeIcon = document.getElementById('menu-icon-close');
        const handleMobileMenuClick = () => {
          if (!menuDropdown || !openIcon || !closeIcon) return;
          const isExpanded = mobileToggleBtn.getAttribute('aria-expanded') === 'true';
          mobileToggleBtn.setAttribute('aria-expanded', String(!isExpanded));
          if (isExpanded) {
            menuDropdown.classList.add('opacity-0', '-translate-y-4', 'pointer-events-none');
            document.body.classList.remove('menu-open', 'overflow-hidden');
          } else {
            menuDropdown.classList.remove('opacity-0', '-translate-y-4', 'pointer-events-none');
            document.body.classList.add('menu-open', 'overflow-hidden');
          }
          openIcon.classList.toggle('hidden');
          closeIcon.classList.toggle('hidden');
        };
        if (mobileToggleBtn) {
          mobileToggleBtn.addEventListener('click', handleMobileMenuClick);
        }
        const dropdownToggle = document.getElementById('sobre-mi-dropdown-toggle');
        const dropdownMenu = document.getElementById('sobre-mi-dropdown-menu');
        const dropdownChevron = document.getElementById('dropdown-chevron');
        const dropdownParent = document.getElementById('sobre-mi-dropdown-parent');
        if (dropdownToggle && dropdownMenu && dropdownChevron && dropdownParent) {
          let isDropdownOpen = false;
          const openDropdown = () => {
            dropdownMenu.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
            dropdownToggle.setAttribute('aria-expanded', 'true');
            dropdownChevron.style.transform = 'rotate(180deg)';
            isDropdownOpen = true;
          };
          const closeDropdown = () => {
            dropdownMenu.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
            dropdownToggle.setAttribute('aria-expanded', 'false');
            dropdownChevron.style.transform = 'rotate(0deg)';
            isDropdownOpen = false;
          };
          const toggleDropdown = () => {
            if (isDropdownOpen) {
              closeDropdown();
            } else {
              openDropdown();
            }
          };
          dropdownToggle.addEventListener('click', toggleDropdown);
          document.addEventListener('click', (event) => {
            if (isDropdownOpen && !dropdownParent.contains(event.target)) {
              closeDropdown();
            }
          });
          document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape' && isDropdownOpen) {
              closeDropdown();
            }
          });
          dropdownToggle.addEventListener('keydown', (event) => {
            if (event.key === 'ArrowDown' && isDropdownOpen) {
              event.preventDefault();
              dropdownMenu.querySelector('a')?.focus();
            }
          });
          dropdownMenu.addEventListener('keydown', (event) => {
            const focusableItems = Array.from(dropdownMenu.querySelectorAll('a'));
            const focusedItemIndex = focusableItems.indexOf(document.activeElement);
            if (event.key === 'ArrowDown') {
              event.preventDefault();
              if (focusedItemIndex < focusableItems.length - 1) {
                focusableItems[focusedItemIndex + 1]?.focus();
              } else {
                focusableItems[0]?.focus();
              }
            } else if (event.key === 'ArrowUp') {
              event.preventDefault();
              if (focusedItemIndex > 0) {
                focusableItems[focusedItemIndex - 1]?.focus();
              } else {
                focusableItems[focusableItems.length - 1]?.focus();
              }
            } else if (event.key === 'Escape') {
              event.preventDefault();
              closeDropdown();
              dropdownToggle.focus();
            }
          });
        }
        applyTheme();
        document.addEventListener('astro:before-swap', () => {
          if (themeToggleBtn) themeToggleBtn.removeEventListener('click', handleToggleClick);
          if (mobileToggleBtn) mobileToggleBtn.removeEventListener('click', handleMobileMenuClick);
        }, { once: true });
      }
      // Add this inside the pageSetup() function in BaseLayout.astro
        
        // --- Mobile Submenu Accordion Logic ---
        const submenuToggleBtn = document.getElementById('mobile-submenu-toggle');
        const submenu = document.getElementById('mobile-submenu');
        const submenuChevron = document.getElementById('mobile-submenu-chevron');

        const handleSubmenuToggle = () => {
          if (!submenu || !submenuChevron) return;

          const isExpanded = submenuToggleBtn.getAttribute('aria-expanded') === 'true';
          
          if (isExpanded) {
            submenuToggleBtn.setAttribute('aria-expanded', 'false');
            submenuChevron.style.transform = 'rotate(0deg)';
            submenu.style.maxHeight = '0px';
          } else {
            submenuToggleBtn.setAttribute('aria-expanded', 'true');
            submenuChevron.style.transform = 'rotate(90deg)';
            // Set max-height to the actual scroll height of the content
            submenu.style.maxHeight = `${submenu.scrollHeight}px`;
          }
        };
        
        if (submenuToggleBtn) {
          submenuToggleBtn.addEventListener('click', handleSubmenuToggle);
        }
      pageSetup();
      document.addEventListener('astro:after-swap', pageSetup);
    </script>
</body>
</html>

