---
import { getCollection } from 'astro:content';
import HorizontalPostCard from './HorizontalPostCard.astro';
import Icon from '../common/Icon.astro'; // We'll use the Icon component for arrows

const { currentPostSlug, currentPostTags = [] } = Astro.props;
const allPosts = await getCollection('blog', (entry) => entry.slug !== currentPostSlug && !entry.data.draft);

const relatedPosts = allPosts.map(post => {
  const sharedTags = (post.data.tags || []).filter(tag => currentPostTags.includes(tag));
  return { post, sharedTagsCount: sharedTags.length };
})
.filter(item => item.sharedTagsCount > 0)
.sort((a, b) => b.sharedTagsCount - a.sharedTagsCount)
.slice(0, 8); // Fetch a few more for a richer carousel

const shouldRender = relatedPosts.length >= 3;
---
{shouldRender && (
  <div class="bg-bg-secondary dark:bg-bg-secondary border-y border-border-card py-16 md:py-20">
    <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Section Header -->
      <div class="flex justify-between items-center mb-8">
        <h2 class="text-2xl sm:text-3xl font-bold text-text-primary">Para seguir explorando</h2>
        <a href="/blog" class="flex-shrink-0 inline-block px-5 py-2.5 bg-transparent border-2 border-accent-primary text-accent-primary text-sm font-medium rounded-lg hover:bg-accent-primary/[.10] transition-colors">
          Ver todo
        </a>
      </div>
    </div>
    
    <!-- FIX #1 & #3: The container for the carousel and arrows -->
    <div class="relative">
      <!-- Left Arrow Button -->
      <button id="carousel-prev" aria-label="Previous post" class="carousel-arrow left-0">
        <Icon name="chevron-left" size="w-6 h-6" />
      </button>

      <!-- The Carousel Itself -->
      <div id="carousel-container" class="flex overflow-x-auto gap-6 pb-4 scroll-smooth scrollbar-hide px-4 sm:px-6 lg:px-8">
        {relatedPosts.map((item) => (
          <div class="w-80 md:w-96 flex-shrink-0">
            <HorizontalPostCard post={item.post} />
          </div>
        ))}
      </div>
      
      <!-- Right Arrow Button -->
      <button id="carousel-next" aria-label="Next post" class="carousel-arrow right-0">
        <Icon name="chevron-right" size="w-6 h-6" />
      </button>

      <!-- The fade-out mask (no change needed here) -->
      <div class="absolute inset-0 pointer-events-none" style={`background: linear-gradient(to right, var(--color-bg-secondary), transparent 10%, transparent 90%, var(--color-bg-secondary));`}></div>
    </div>
  </div>
)}

<style>
  .scrollbar-hide::-webkit-scrollbar { display: none; }
  .scrollbar-hide { -ms-overflow-style: none; scrollbar-width: none; }

  .carousel-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 10;
    width: 3rem; /* w-12 */
    height: 3rem; /* h-12 */
    border-radius: 9999px; /* rounded-full */
    background-color: rgba(var(--color-bg-card-rgb, 255 255 255) / 0.5); /* bg-bg-card/50 */
    backdrop-filter: blur(4px); /* backdrop-blur-sm */
    border: 1px solid var(--color-border-card);
    color: var(--color-text-secondary);
    display: flex;
    align-items: center;
    justify-content: center;
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
    opacity: 0;
  }
  
  .carousel-arrow:hover {
    color: var(--color-text-primary);
    background-color: var(--color-bg-card);
  }

  .carousel-arrow:disabled {
    opacity: 0;
    cursor: not-allowed;
  }
  
</style>

<script>
function setupInfiniteCarousel() {
  const container = document.getElementById('carousel-container');
  const prevBtn = document.getElementById('carousel-prev');
  const nextBtn = document.getElementById('carousel-next');

  if (!container || !prevBtn || !nextBtn) return;
  
  // --- INFINITE LOGIC SETUP ---
  const originalItems = Array.from(container.children);
  if (originalItems.length <= 3) return; // Don't bother if there aren't enough items

  // 1. Clone items for the seamless loop
  originalItems.forEach(item => {
    const clone = item.cloneNode(true);
    clone.setAttribute('aria-hidden', 'true');
    container.appendChild(clone);
  });

  const scrollAmount = (container.querySelector('div')?.clientWidth || 320) + 24; // card width + gap

  prevBtn.addEventListener('click', () => {
    container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
  });

  nextBtn.addEventListener('click', () => {
    container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
  });

  // 2. The scroll listener that creates the infinite illusion
  let isScrolling;
  function handleInfiniteScroll() {
    isScrolling = false;
    
    // We get the total width of the *original* items
    const scrollWidthOriginal = container.scrollWidth / 2;

    // Check for forward loop
    if (container.scrollLeft >= scrollWidthOriginal) {
      // We are at the "fake" end, so silently jump back to the real beginning
      container.scrollBy({ left: -scrollWidthOriginal, behavior: 'instant' });
    }
    
    // Check for backward loop
    if (container.scrollLeft <= 0) {
      // We are at the "real" beginning, so silently jump to the "fake" beginning
      container.scrollBy({ left: scrollWidthOriginal, behavior: 'instant' });
    }
  }

  container.addEventListener('scroll', () => {
    if (!isScrolling) {
      // Use requestAnimationFrame for smoother performance
      window.requestAnimationFrame(handleInfiniteScroll);
    }
    isScrolling = true;
  }, { passive: true });
  
  // Set initial position to the start of the "fake" set for seamless backward scroll
  container.scrollBy({ left: container.scrollWidth / 2, behavior: 'instant' });
}

document.addEventListener('astro:page-load', setupInfiniteCarousel);
</script>